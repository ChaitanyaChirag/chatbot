{"version":3,"sources":["data/config/urls.js","data/config/utils.js","data/config/constants.js","data/redux/actiontypes.js","data/redux/chat_details/actions.js","data/redux/chat_details/middleware.js","data/redux/chat_details/states.js","data/redux/chat_details/reducers.js","data/redux/page_details/states.js","data/redux/rootreducer.js","data/redux/page_details/reducers.js","serviceWorker.js","data/redux/page_details/actions.js","components/triggerchatbot/index.js","modules/index.js","index.js","data/redux/store.js"],"names":["getSocketUrl","getPsid","getPlatform","chatbot_client_info","sentry_dsn","icon_url","brand_name","sender_id","trigger","visibility","icon_height","mobile_icon_width","animation_duration","lottie_visibility","lottie_path","lottie_icon_height","lottie_icon_width","show_close_icon","chatbot_setting","automate_connection_time","automate_reset_chat_time","powered_by","target_url","notification_bot","stack_view","chat_interface","show_bg_image","bg_image_url","adster_bot","query_param_key","auto_emit_response","enable","payload","type","MESSAGE_TYPES","TEXT","text","chatbot_status","common","socket_connection_lost","feedback","greeting","low_rated","high_rated","success","failed","s4","Math","floor","random","toString","substring","DEV_VAR","uniqueId","time","Date","getTime","log","str","value","console","showMessage","msg","node","document","getElementById","message","config","top","getContainer","checkImageTypeFile","filename","test","fileToBase64","file","Promise","resolve","reader","FileReader","onload","event","target","result","readAsDataURL","getCookie","name","v","cookie","match","PLATFORM","ANDROID","WEBSITE","window","ori_platform","undefined","toLowerCase","isAndroid","platform","psid","localStorage","getItem","setItem","LOCAL_STORAGE","MESSAGES","UNSEEN_MESSAGES","NOTIFICATION_COUNT","LAST_EMIT","PSID","IS_CHAT_OPEN","APP_PARAMS","END_CHAT","getDataFromLocalStorage","key","undefined_return_value","data","JSON","parse","setDataInLocalStorage","json_data","stringify","getDefaultMessages","android_default_messages","default_messages","getLocalMessage","getLocalUnseenMessage","getLocalNotificationCount","getLocalChatOpenStatus","formatDate","options","toLocaleDateString","formatTime","toLocaleTimeString","scrollToBottom","scrollTop","scrollHeight","checkDevice","screen_data","screen_width","innerWidth","screen_height","innerHeight","screen_orientation","this","screen_type","matchMedia","matches","deviceStatus","ERROR_BOUNDARY_TYPE","ERROR","EVENTS","CONNECT","DISCONNECT","CONNECT_ERROR","RESPONSE","NEW_MESSAGE","RESET_CHAT","SHOW_TYPING","BOT_AUTO_POPUP_REQUEST","RECORD_FEEDBACK","GET_WEBSITE_DATA","WEBSITE_DATA","CHATLOG_FEEDBACK","TYPING_STATUS","UPDATE_MESSAGE","UPDATE_ADMIN_MESSAGE","MESSAGE_SEEN","END_CONVERSATION","END_CONVERSATION_FORM_SUBMIT","DOWN_TIME","LIST","TEXT_WITH_BUTTONS","IMAGE_WITH_BUTTONS","CHECKBOX_WITH_MEDIA","VIDEO","TIMER","CAROUSEL","CUSTOM_MSG","NOTIFICATION","UPLOAD_FILE","FILE","SYSTEM_TEXT","MESSAGE_SUBTYPES","DISH_RECHARGE","DISH_RECHARGE_DETAILS","DISH_OFFERS","DISH_RECHARGE_HISTORY","MESSAGE_READ_STATUS","SENDING","SENT","DELIVERED","SEEN","FAILED","BUTTON_TYPES","LINK","DEFAULT","CUSTOM","CUSTOM_SOCKET_EVENT","POST_BACK_RESPONSE","BUTTON_SUB_TYPES","CHECKBOX_SUBMIT","MESSAGE_SENDER","SYSTEM","CUSTOMER","ADMIN","CHATBOT","sender","inputLock","quickReply","skipLS","send_variable_to_apiai","sendVariableToLS","variable_name","delay","timestamp","quickReplies","title","subtitle","buttons","url","actionTypes","DEVICE_DATA_LOADED","ENABLE_ADSTER_BOT","UPDATE_STATE","UPDATE_END_CHAT","MAKE_SOCKET_CONNECTION","SOCKET_DISCONNECT","BOT_POPUP_REQUEST","EMIT_NEW_MESSAGE","EMIT_CUSTOM_EVENT","MESSAGE_VOTING","SEND_FEEDBACK","UPDATE_TYPING_INFO","UPDATE_PSID","HANDLE_CHATBOT_INTERFACE","SOCKET_CONNECTED","SOCKET_CONNECT_ERROR","SOCKET_ERROR","PUSH_RESPONSE_MESSAGE","PUSH_SENDER_MESSAGE","SET_DEFAULT_STATE","CLEAR_UNSEEN_MESSAGES","UPDATE_FILE_UPLOAD_MESSAGE","updateState","updateEndChat","makeSocketConnection","socketDisconnect","handleBotPopupRequest","emitCustomEvent","callback","emitNewMessageToServer","pushSenderMessage","onMessageVoting","resetChat","sendFeedback","handleChatbotInterface","setDefaultState","messages","updateFileUploadMessage","registerSocketListener","store","socket","on","chat_details","getState","dispatch","connected","length","session_id","io","engine","id","current_session_id","navigator_userAgent","navigator","userAgent","navigator_platform","emit","clientPsid","senderPsid","error","reason","connect","res","downTime","isDownTime","bot_messages","cmid","chatlogId","updated_message_data","readStatus","err","visibilityState","is_chat_open","message_seen_payload","websiteData","forEach","item","source","newKey","typingInfo","updateChatlogId","changedValue","updatedCustomerMessage","messageSeen","visible","show_resolved_card","middleware","next","action","close","socket_url","displayMessage","voteType","ok","unseen_messages","notification_count","states","is_socket_connected","is_internet_connected","downtime","is_typing","typing_text","quick_replies","CONSTANTS","SERVER","is_input_lock","input_lock_text","inputLockMessage","end_chat","show_confirmation_card","show_form_card","form","description","state","removeItem","msg_length","isTyping","typingMessage","index","findLastIndex","slice","i","page_details","device_data","is_adster_bot","rootReducer","combineReducers","Boolean","location","hostname","setDeviceData","enableAdsterBot","TriggerChatBot","lottieDefaultOptions","loop","autoplay","path","rendererSettings","preserveAspectRatio","handleChatInterfaceView","props","handleSocketConnection","className","onClick","height","width","style","animationDuration","src","alt","size","React","PureComponent","ChatBot","lazy","NotificationBot","AppContainer","handleConnectionChange","actions","onLine","webPing","setInterval","fetch","mode","then","clearInterval","catch","botPopup","case_data","params","case","bool","android","handleOfferSelection","offer_id","offer_name","setState","selected_offer","setDefaultOfferState","onChangeCheckbox","selected_checkbox_values","emitResponseToServer","response","lockedParams","emit_time","pushSenderNewMsgToChatbot","user_message","sendTextToServer","handleButtonSubTypes","button","subtype","selected_checkbox_items","filter","findIndex","list","relayData","obj","handleMsgBtnClick","trim","androidObj","textToAndroid","open","eventName","merge","expectedClientResponseType","postbackRes","handleFileUpload","fileUrl","fileBase64","imageUrl","timeout","self","bot_popup","addEventListener","clearTimeout","setTimeout","updateFromAndroid","last_emit","time_gap","URLSearchParams","search","get","removeEventListener","count","overflowCount","fallback","Component","bindActionCreators","Object","assign","pageActions","chatActions","init","dsn","middlewares","socketMiddleware","_createStore","compose","applyMiddleware","devToolsExtension","f","createStore","x","createElement","setAttribute","body","appendChild","ReactDOM","render","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.449920bf.chunk.js","sourcesContent":["import { getPsid, getPlatform } from './utils';\nimport { MESSAGE_TYPES } from './constants';\n\nconst version = 1.1;\n// const brandName = 'vodafone';\nconst brandName = 'dishtv';\n\n// const url = \"https://webtest.vodafone-elb.oriserve.in\";\n// const url = \"https://dishtestbackend.oriserve.in\";\n// const url = \"https://tata-altroz-staging-backend.oriserve.in\";\n// const url = \"http://localhost:8095\";\n// const url = \"https://piramal-backend.oriserve.in\";\nconst url = \"https://dishtv-testing-backend.oriserve.in\";\n// const url = \"https://vodafone-dev.oriserve.in\";\n\nexport const getSocketUrl = () => {\n    const socket_url = `${url}/liveConversations?psid=${getPsid()}&ver=${version}&role=user&brandName=${brandName}&botName=${brandName}&channelName=${getPlatform()}`;\n    return socket_url;\n};\n\nexport const chatbot_client_info = {\n    sentry_dsn: \"https://fa80a3e669cc4ee78bcb94c405adecba@sentry.io/1512125\",\n    icon_url: \"https://d113ddgi4j6d7k.cloudfront.net/dashboard/ava.png\",\n    brand_name: \"Vodafone\",\n    sender_id: \"dish_chat_client\",\n    trigger: {\n        visibility: false, //to enable custom trigger\n        icon_url: \"https://d113ddgi4j6d7k.cloudfront.net/dashboard/ava.png\",\n        icon_height: 90, //in number only\n        mobile_icon_width: 80, //in number only\n        animation_duration: 2000, // in milliseceond only\n        lottie_visibility: true, // to enable lottie icon\n        lottie_path: \"https://d113ddgi4j6d7k.cloudfront.net/dashboard/cue.json\",\n        lottie_icon_height: 70,\n        lottie_icon_width: 70,\n        show_close_icon: true,\n    }\n};\n\nexport const chatbot_setting = {\n    automate_connection_time: 3600, //in seceond only\n    automate_reset_chat_time: 3600 * 24 * 4, //in second only\n    powered_by: {\n        visibility: true, // to enable powered by tag\n        target_url: \"http://oriserve.com/\",\n        icon_url: \"https://d113ddgi4j6d7k.cloudfront.net/ori_logo.png\"\n    },\n    notification_bot: {\n        visibility: true, // to enable notification popup\n        stack_view: false, // to show to stack view of notification bot\n    },\n    chat_interface: {\n        show_bg_image: true, // to enable chatinterface background\n        bg_image_url: \"https://d113ddgi4j6d7k.cloudfront.net/dashboard/chat_interface.jpg\"\n    },\n    adster_bot: {\n        query_param_key: 'ischatbotopen', // query parameter key\n        visibility: true, // to enable iframe require changes\n    },\n    auto_emit_response: {\n        enable: true,\n        payload: {\n            type: MESSAGE_TYPES.TEXT,\n            text: \"first emit message\",\n        }\n    }\n};\n\nexport const chatbot_status = {\n    common: {\n        socket_connection_lost: \"connection has been lost\"\n    },\n    feedback: {\n        greeting: \"How happy are you with our support ?\",\n        low_rated: \"Please tell us what went wrong.\",\n        high_rated: \"Please suggest how can we make your next visit awesome.\",\n        success: \"Thank you for giving us feedback\",\n        failed: \"Some error occured please try again later\"\n    }\n};\n\n","import message from 'antd/lib/message';\n\nimport { default_messages, android_default_messages } from './constants';\n\nconst s4 = () => {\n  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n}\n\nconst DEV_VAR = {\n  ENABLE_CONSOLE: true,\n};\n\nexport const guid = () => {\n  return s4() + s4() +\n    s4() + s4();\n};\n\nexport const uniqueId = () => {\n  let time = new Date().getTime();\n  return `${time}_${guid()}`;\n};\n\nexport const log = (str, value) => {\n  if (DEV_VAR.ENABLE_CONSOLE) {\n    value ? console.log(str, value) : console.log(str);\n  }\n};\n\nexport const showMessage = (type, msg) => {\n  const node = document.getElementById('chatbotContentContainer');\n  if (node) {\n    message.config({\n      top: 75,\n      getContainer: () => node,\n    });\n    message[type](msg);\n  }\n};\n\nexport const checkImageTypeFile = filename => {\n  return (/\\.(gif|jpg?g|tiff|png)$/i).test(filename)\n};\n\nexport const fileToBase64 = file => {\n  return new Promise(resolve => {\n    var reader = new FileReader();\n    reader.onload = event => {\n      resolve(event.target.result);\n    };\n    reader.readAsDataURL(file);\n  });\n};\n\nexport const getCookie = (name) => {\n  var v = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');\n  return v ? v[2] : null\n};\n\nexport const PLATFORM = {\n  ANDROID: \"android\",\n  WEBSITE: \"website\",\n};\n\nexport const getPlatform = () => {\n  let platform = null;\n  if (window.ori_platform && window.ori_platform !== undefined && window.ori_platform.toLowerCase() === PLATFORM.ANDROID) {\n    platform = PLATFORM.ANDROID;\n  } else {\n    platform = PLATFORM.WEBSITE;\n  }\n  return platform;\n};\n\nexport const isAndroid = () => {\n  let platform = getPlatform();\n  return (platform && platform.toLowerCase() === PLATFORM.ANDROID);\n};\n\nexport const getPsid = () => {\n  let psid = null;\n  if (localStorage.getItem('psid')) {\n    psid = localStorage.getItem('psid');\n  } else {\n    psid = uniqueId();\n    localStorage.setItem('psid', psid);\n  }\n  return psid;\n};\n\nexport const LOCAL_STORAGE = {\n  MESSAGES: getPsid,\n  UNSEEN_MESSAGES: \"unseen_messages\",\n  NOTIFICATION_COUNT: \"notification_count\",\n  LAST_EMIT: \"last_emit\",\n  PSID: \"psid\",\n  IS_CHAT_OPEN: \"is_chat_open\",\n  ANDROID: \"android\",\n  APP_PARAMS: \"app_params\",\n  END_CHAT: \"end_chat\"\n};\n\nexport const hasAndroidInterface = () => { //the java JS interface exists for android\n  let android = localStorage.getItem(LOCAL_STORAGE.ANDROID) ? JSON.parse(localStorage.getItem(LOCAL_STORAGE.ANDROID)) : false;\n  return (android);\n};\n\nexport const getDataFromLocalStorage = (key, undefined_return_value) => {\n  const data = localStorage.getItem(key);\n  return (data && data !== undefined ? JSON.parse(data) : undefined_return_value);\n};\n\nexport const setDataInLocalStorage = (key, data) => {\n  const json_data = JSON.stringify(data);\n  localStorage.setItem(key, json_data);\n};\n\nexport const getDefaultMessages = () => {\n  const is_android = isAndroid();\n  if (is_android) {\n    return android_default_messages;\n  }\n  return default_messages;\n};\n\nexport const getLocalMessage = () => {\n  const messages = localStorage.getItem(LOCAL_STORAGE.MESSAGES()) ? JSON.parse(localStorage.getItem(LOCAL_STORAGE.MESSAGES())) : getDefaultMessages();\n  return messages;\n};\n\nexport const getLocalUnseenMessage = () => {\n  let unseen_messages = localStorage.getItem(LOCAL_STORAGE.UNSEEN_MESSAGES) ? JSON.parse(localStorage.getItem(LOCAL_STORAGE.UNSEEN_MESSAGES)) : [];\n  return unseen_messages;\n};\n\nexport const getLocalNotificationCount = () => {\n  let count = localStorage.getItem(LOCAL_STORAGE.NOTIFICATION_COUNT) ? JSON.parse(localStorage.getItem(LOCAL_STORAGE.NOTIFICATION_COUNT)) : 0;\n  return count;\n};\n\nexport const getLocalChatOpenStatus = () => {\n  let is_chat_open = localStorage.getItem(LOCAL_STORAGE.IS_CHAT_OPEN) ? JSON.parse(localStorage.getItem(LOCAL_STORAGE.IS_CHAT_OPEN)) : false;\n  return is_chat_open;\n};\n\nexport const formatDate = (value, options) => {\n  let date = new Date(value);\n  return date.toLocaleDateString('en-In', options);\n};\n\nexport const formatTime = (value, options) => {\n  let date = new Date(value);\n  return date.toLocaleTimeString('en-In', options);\n};\n\nexport const scrollToBottom = node => {\n  if (node) {\n    node.scrollTop = node.scrollHeight;\n  }\n};\n\nexport const checkDevice = {\n  screen_data: function () {\n    return (\n      {\n        screen_width: window.innerWidth,\n        screen_height: window.innerHeight,\n        screen_orientation: this.screen_orientation(),\n        screen_type: this.screen_type()\n      }\n    );\n  },\n  screen_orientation: function () {\n    if (window.matchMedia(\"(orientation:landscape)\").matches) {\n      return 'landscape';\n    } else {\n      return 'portrait';\n    }\n  },\n  screen_type: function () {\n    if (window.innerWidth <= 480) {\n      return 'xs';\n    } else if (window.innerWidth <= 768) {\n      return 'sm';\n    } else if (window.innerWidth <= 992) {\n      return 'md';\n    } else if (window.innerWidth <= 1200) {\n      return 'lg';\n    } else if (window.innerWidth <= 1600) {\n      return 'hd';\n    } else if (window.innerWidth <= 2560) {\n      return 'fhd';\n    } else {\n      return 'uhd';\n    }\n  },\n  deviceStatus: function () {\n    return ({\n      ...this.screen_data()\n    });\n  }\n};\n","export const ERROR_BOUNDARY_TYPE = {\n    ERROR: \"error\",\n};\n\nexport const EVENTS = {\n    CONNECT: \"connect\",\n    DISCONNECT: \"disconnect\",\n    CONNECT_ERROR: \"connect_error\",\n    ERROR: \"error\",\n    RESPONSE: \"response\",\n    NEW_MESSAGE: \"new_message\",\n    RESET_CHAT: \"reset_chat\",\n    SHOW_TYPING: \"show_typing\",\n    BOT_AUTO_POPUP_REQUEST: \"botAutoPopupRequest\",\n    RECORD_FEEDBACK: \"recordFeedback\",\n    GET_WEBSITE_DATA: \"getWebsiteData\",\n    WEBSITE_DATA: \"websiteData\",\n    CHATLOG_FEEDBACK: \"chatlogFeedback\",\n    TYPING_STATUS: \"typingStatus\",\n    UPDATE_MESSAGE: \"updateMessage\",\n    UPDATE_ADMIN_MESSAGE: \"updateAdminMessage\",\n    MESSAGE_SEEN: \"messageSeen\",\n    END_CONVERSATION: \"end_conversation\",\n    END_CONVERSATION_FORM_SUBMIT: \"end_conversation_form_submit\",\n    DOWN_TIME: 'downTime'\n};\n\nexport const MESSAGE_TYPES = {\n    TEXT: \"text\",\n    LIST: \"list\",\n    TEXT_WITH_BUTTONS: \"text_with_buttons\",\n    IMAGE_WITH_BUTTONS: \"image_with_buttons\",\n    CHECKBOX_WITH_MEDIA: \"checkbox_with_media\",\n    VIDEO: \"video\",\n    TIMER: \"timer\",\n    CAROUSEL: \"carousel\",\n    CUSTOM_MSG: \"customMsg\",\n    NOTIFICATION: \"notification\",\n    UPLOAD_FILE: \"uploadFile\",\n    FILE: \"file\",\n    SYSTEM_TEXT: \"systemText\",\n};\n\nexport const MESSAGE_SUBTYPES = {\n    DISH_RECHARGE: \"dishRecharge\",\n    DISH_RECHARGE_DETAILS: \"dishRechargeDetails\",\n    DISH_OFFERS: \"dishOffers\",\n    DISH_RECHARGE_HISTORY: \"dishRechargeHistory\",\n};\n\nexport const MESSAGE_READ_STATUS = {\n    SENDING: 'sending',\n    SENT: 'sent',\n    DELIVERED: 'delivered',\n    SEEN: 'seen',\n    FAILED: 'failed',\n};\n\nexport const BUTTON_TYPES = {\n    LINK: \"link\",\n    DEFAULT: \"default\",\n    CUSTOM: \"custom\",\n    CUSTOM_SOCKET_EVENT: \"customSocketEvent\",\n    POST_BACK_RESPONSE: \"postbackRes\",\n};\n\nexport const BUTTON_SUB_TYPES = {\n    DISH_OFFERS: \"dishOffers\",\n    CHECKBOX_SUBMIT: \"checkboxSubmit\",\n};\n\nexport const MESSAGE_SENDER = {\n    SYSTEM: \"system\",\n    CUSTOMER: \"customer\",\n    ADMIN: \"admin\",\n    CHATBOT: \"chatbot\",\n};\n\nexport const default_messages = [\n    {\n        sender: MESSAGE_SENDER.CHATBOT,\n        type: MESSAGE_TYPES.TEXT,\n        inputLock: false,\n        quickReply: [],\n        skipLS: false,\n        send_variable_to_apiai: false,\n        sendVariableToLS: false,\n        variable_name: '',\n        delay: 0,\n        payload: {\n            text: \"Hi, I'm ADI, Your Personal DishTV Assistant.\"\n        },\n        timestamp: new Date(),\n    },\n    {\n        sender: MESSAGE_SENDER.CHATBOT,\n        inputLock: false,\n        skipLS: false,\n        send_variable_to_apiai: false,\n        sendVariableToLS: false,\n        variable_name: '',\n        quickReplies: [],\n        type: MESSAGE_TYPES.TEXT_WITH_BUTTONS,\n        delay: 0,\n        payload: {\n            title: \"\",\n            subtitle: \"What can I help you with today?\",\n            buttons: [\n                {\n                    type: BUTTON_TYPES.DEFAULT,\n                    text: \"Recharge My Dish TV\",\n                    url: \"\"\n                },\n                {\n                    type: BUTTON_TYPES.DEFAULT,\n                    text: \"Recharge Offers\",\n                    url: \"\"\n                },\n                {\n                    type: BUTTON_TYPES.DEFAULT,\n                    text: \"Current Balance\",\n                    url: \"\"\n                },\n                {\n                    type: BUTTON_TYPES.DEFAULT,\n                    text: \"Other Queries\",\n                    url: \"\"\n                },\n            ]\n        },\n        timestamp: new Date(),\n    },\n    // {\n\n    //     sender: MESSAGE_SENDER.CHATBOT,\n    //     inputLock: false,\n    //     skipLS: false,\n    //     send_variable_to_apiai: false,\n    //     sendVariableToLS: false,\n    //     variable_name: '',\n    //     quickReplies: [],\n    //     type: MESSAGE_TYPES.CHECKBOX_WITH_MEDIA,\n    //     delay: 0,\n    //     payload: {\n    //         title: \"Ori Serve\",\n    //         subtitle: \"Please Select following options and proceed\",\n    //         options: [{\n    //             \"value\": \"Banking\",\n    //             \"label\": \"Banking\"\n    //         }, {\n    //             \"value\": \"Real Estate\",\n    //             \"label\": \"Real Estate\"\n    //         }, {\n    //             \"value\": \"Education\",\n    //             \"label\": \"Education\"\n    //         }, {\n    //             \"value\": \"Health\",\n    //             \"label\": \"Health\"\n    //         }, {\n    //             \"value\": \"Consumer Goods\",\n    //             \"label\": \"Consumer Goods\"\n    //         }, {\n    //             \"value\": \"Entertainment\",\n    //             \"label\": \"Entertainment\"\n    //         }, {\n    //             \"value\": \"Tourism\",\n    //             \"label\": \"Tourism\"\n    //         }],\n    //         buttons: [\n    //             {\n    //                 type: BUTTON_TYPES.CUSTOM,\n    //                 subtype: BUTTON_SUB_TYPES.CHECKBOX_SUBMIT,\n    //                 text: \"Submit\",\n    //                 relayData: {\n    //                     \"entity\": \"dndCategories\"\n    //                 }\n    //             },\n    //             {\n    //                 type: BUTTON_TYPES.DEFAULT,\n    //                 text: \"Cancel\",\n    //                 url: \"\"\n    //             },\n    //         ]\n    //     },\n    //     timestamp: new Date()\n    // }\n];\n\nexport const android_default_messages = [\n    {\n        sender: MESSAGE_SENDER.CHATBOT,\n        type: MESSAGE_TYPES.TEXT,\n        inputLock: false,\n        quickReply: [],\n        skipLS: false,\n        send_variable_to_apiai: false,\n        sendVariableToLS: false,\n        variable_name: '',\n        delay: 0,\n        payload: {\n            text: \"Hi, I'm ADI, Your Personal DishTV Assistant.\"\n        },\n        timestamp: new Date(),\n    },\n    {\n        sender: MESSAGE_SENDER.CHATBOT,\n        inputLock: false,\n        skipLS: false,\n        send_variable_to_apiai: false,\n        sendVariableToLS: false,\n        variable_name: '',\n        quickReplies: [],\n        type: MESSAGE_TYPES.TEXT_WITH_BUTTONS,\n        delay: 0,\n        payload: {\n            title: \"\",\n            subtitle: \"What can I help you with today?\",\n            buttons: [\n                {\n                    type: BUTTON_TYPES.DEFAULT,\n                    text: \"My DishTV is not working\",\n                    url: \"\"\n                },\n                {\n                    type: BUTTON_TYPES.DEFAULT,\n                    text: \"Recharge Offers\",\n                    url: \"\"\n                },\n                {\n                    type: BUTTON_TYPES.DEFAULT,\n                    text: \"Current Balance\",\n                    url: \"\"\n                },\n                {\n                    type: BUTTON_TYPES.DEFAULT,\n                    text: \"Package details\",\n                    url: \"\"\n                },\n                {\n                    type: BUTTON_TYPES.DEFAULT,\n                    text: \"Other Queries\",\n                    url: \"\"\n                },\n            ],\n\n        },\n        timestamp: new Date()\n    }\n];","const actionTypes = {\n    /* -------------- page_details ------------------ */\n    \n    DEVICE_DATA_LOADED: \"DEVICE_DATA_LOADED\",\n    ENABLE_ADSTER_BOT: \"ENABLE_ADSTER_BOT\",\n\n    /* --------------chatbot_details----------------- */\n\n    UPDATE_STATE: \"UPDATE_STATE\",\n    UPDATE_END_CHAT: \"UPDATE_END_CHAT\",\n    MAKE_SOCKET_CONNECTION: \"MAKE_SOCKET_CONNECTION\",\n    SOCKET_DISCONNECT: \"SOCKET_DISCONNECT\",\n    BOT_POPUP_REQUEST: \"BOT_POPUP_REQUEST\",\n    EMIT_NEW_MESSAGE: \"EMIT_NEW_MESSAGE\",\n    EMIT_CUSTOM_EVENT: \"EMIT_CUSTOM_EVENT\",\n    MESSAGE_VOTING: \"MESSAGE_VOTING\",\n    RESET_CHAT: \"RESET_CHAT\",\n    SEND_FEEDBACK: \"SEND_FEEDBACK\",\n    UPDATE_TYPING_INFO: \"UPDATE_TYPING_INFO\",\n    UPDATE_MESSAGE: \"UPDATE_MESSAGE\",\n    MESSAGE_SEEN: \"MESSAGE_SEEN\",\n\n    \n\n    UPDATE_PSID: \"UPDATE_PSID\",\n    HANDLE_CHATBOT_INTERFACE: \"HANDLE_CHATBOT_INTERFACE\",\n    SOCKET_CONNECTED: \"SOCKET_CONNECTED\",\n    SOCKET_CONNECT_ERROR: \"SOCKET_CONNECT_ERROR\",\n    SOCKET_ERROR: \"SOCKET_ERROR\",\n    PUSH_RESPONSE_MESSAGE: \"PUSH_RESPONSE_MESSAGE\",\n    PUSH_SENDER_MESSAGE: \"PUSH_SENDER_MESSAGE\",\n    SET_DEFAULT_STATE: \"SET_DEFAULT_STATE\",\n    SHOW_TYPING: \"SHOW_TYPING\",\n    CLEAR_UNSEEN_MESSAGES: \"CLEAR_UNSEEN_MESSAGES\",\n    GET_WEBSITE_DATA: \"GET_WEBSITE_DATA\",\n    UPDATE_FILE_UPLOAD_MESSAGE: \"UPDATE_FILE_UPLOAD_MESSAGE\",\n};\n\nexport default actionTypes;","import actionTypes from '../actiontypes';\nimport { getLocalMessage } from '../../config/utils';\n\nexport const updateState = (key, payload) => {\n  return {\n    type: actionTypes.UPDATE_STATE,\n    payload,\n    key\n  }\n};\n\nexport const updateEndChat = payload => {\n  return {\n    type: actionTypes.UPDATE_END_CHAT,\n    payload,\n  }\n};\n\nexport const makeSocketConnection = () => {\n  return {\n    type: actionTypes.MAKE_SOCKET_CONNECTION,\n  }\n};\n\nexport const socketDisconnect = () => {\n  return {\n    type: actionTypes.SOCKET_DISCONNECT,\n  };\n};\n\nexport const handleBotPopupRequest = payload => {\n  return {\n    type: actionTypes.BOT_POPUP_REQUEST,\n    payload\n  };\n};\n\nexport const emitCustomEvent = (event, payload, callback) => {\n  return {\n    type: actionTypes.EMIT_CUSTOM_EVENT,\n    payload,\n    event,\n    callback\n  };\n};\n\nexport const emitNewMessageToServer = payload => {\n  return {\n    type: actionTypes.EMIT_NEW_MESSAGE,\n    payload\n  };\n};\n\nexport const pushSenderMessage = message => {\n  return {\n    type: actionTypes.PUSH_SENDER_MESSAGE,\n    payload: { message },\n  };\n};\n\nexport const onMessageVoting = payload => {\n  return {\n    type: actionTypes.MESSAGE_VOTING,\n    payload\n  };\n};\n\nexport const resetChat = (payload, callback) => {\n  return {\n    type: actionTypes.RESET_CHAT,\n    payload,\n    callback\n  };\n};\n\nexport const sendFeedback = (payload, callback) => {\n  return {\n    type: actionTypes.SEND_FEEDBACK,\n    payload,\n    callback\n  };\n};\n\nexport const handleChatbotInterface = payload => {\n  return {\n    type: actionTypes.HANDLE_CHATBOT_INTERFACE,\n    payload,\n  };\n};\n\nexport const setDefaultState = () => {\n  let payload = {\n    messages: getLocalMessage(),\n  };\n  return {\n    type: actionTypes.SET_DEFAULT_STATE,\n    payload,\n  };\n};\n\nexport const updateFileUploadMessage = (payload) => {\n  return {\n    type: actionTypes.UPDATE_FILE_UPLOAD_MESSAGE,\n    payload\n  };\n};\n","import io from 'socket.io-client';\n\nimport { EVENTS, MESSAGE_READ_STATUS } from '../../config/constants';\nimport { getSocketUrl, chatbot_setting, chatbot_client_info } from '../../config/urls';\nimport { log, getCookie, getDefaultMessages, uniqueId } from '../../config/utils';\nimport { updateState, emitCustomEvent, socketDisconnect } from './actions';\nimport actionTypes from '../actiontypes';\n\nconst registerSocketListener = (store, socket) => {\n  socket.on(EVENTS.CONNECT, () => {\n    log('socket connected', socket);\n    const chat_details = store.getState().chat_details;\n    store.dispatch(updateState('is_socket_connected', socket.connected));\n    const default_messages = getDefaultMessages();\n    if (chatbot_setting.auto_emit_response.enable && chat_details.messages.length === default_messages.length) {\n      const data = {\n        ...chatbot_setting.auto_emit_response.payload,\n        session_id: socket.io.engine.id,\n        current_session_id: socket.io.engine.id,\n        sender_id: chatbot_client_info.sender_id,\n        navigator_userAgent: navigator.userAgent,\n        navigator_platform: navigator.platform,\n        variable_name: chat_details.variable_name,\n        send_variable_to_apiai: chat_details.send_variable_to_apiai,\n        sendVariableToLS: chat_details.sendVariableToLS,\n        skipLS: chat_details.skipLS\n      };\n      console.log('first emit data', data);\n      socket.emit(EVENTS.NEW_MESSAGE, data);\n    }\n    if (chat_details.psid) {\n      const payload = {\n        clientPsid: chat_details.psid,\n        senderPsid: chat_details.psid,\n      };\n      store.dispatch(emitCustomEvent(EVENTS.MESSAGE_SEEN, payload));\n    }\n  });\n\n  socket.on(EVENTS.CONNECT_ERROR, error => {\n    log('socket connect error', error);\n    store.dispatch(updateState('is_socket_connected', socket.connected));\n  });\n\n  socket.on(EVENTS.ERROR, error => {\n    log(' socket error', error);\n    store.dispatch(updateState('is_socket_connected', socket.connected));\n  });\n\n  socket.on(EVENTS.DISCONNECT, reason => {\n    if (reason === 'io server disconnect') {\n      socket.connect();\n    }\n    store.dispatch(updateState('is_socket_connected', socket.connected));\n  });\n\n  socket.on(EVENTS.DOWN_TIME, res => {\n    log('downtime res', res);\n    if (res.downTime){\n      store.dispatch(updateState('downtime', res.downTime));\n      if(res.downTime.isDownTime)\n        store.dispatch(socketDisconnect());\n    } \n  });\n\n  socket.on(EVENTS.RESPONSE, res => {\n    log('response', res);\n    const chat_details = store.getState().chat_details;\n    if (res && res.psid && res.psid === chat_details.psid) {\n      const payload = {\n        message: res.result && res.result.bot_messages && res.result.bot_messages.length > 0 ? res.result.bot_messages[0] : null\n      };\n      if (payload.message) {\n        payload.message.cmid = uniqueId();\n        if (res.chatlogId) {\n          const updated_message_data = {\n            readStatus: MESSAGE_READ_STATUS.DELIVERED,\n            clientPsid: chat_details.psid,\n            senderPsid: chat_details.psid,\n            chatlogId: res.chatlogId\n          };\n          socket.emit(EVENTS.UPDATE_ADMIN_MESSAGE, updated_message_data, err => {\n            if (!err && document.visibilityState === 'visible' && chat_details.is_chat_open) {\n              const message_seen_payload = {\n                clientPsid: chat_details.psid,\n                senderPsid: chat_details.psid,\n              };\n              socket.emit(EVENTS.MESSAGE_SEEN, message_seen_payload);\n            }\n          });\n        }\n        store.dispatch({\n          type: actionTypes.PUSH_RESPONSE_MESSAGE,\n          payload\n        });\n      } else {\n        log('response data format is not correct', res);\n      }\n    }\n  });\n\n  socket.on(EVENTS.GET_WEBSITE_DATA, data => {\n    const chat_details = store.getState().chat_details;\n    if (data && data.length > 0) {\n      const websiteData = {};\n      data.forEach(item => {\n        if (item.source === 'cookie') {\n          websiteData[item.newKey] = getCookie(item.key);\n        } else if (item.source === 'localstorage') {\n          websiteData[item.newKey] = localStorage.getItem(item.key);\n        }\n      });\n      socket.emit(EVENTS.WEBSITE_DATA, { websiteData, psid: chat_details.psid });\n    }\n  });\n\n  socket.on(EVENTS.TYPING_STATUS, data => {\n    const chat_details = store.getState().chat_details;\n    if (data && data.typingInfo && data.typingInfo.senderPsid !== chat_details.psid) {\n      store.dispatch({\n        type: actionTypes.UPDATE_TYPING_INFO,\n        payload: data.typingInfo\n      });\n    }\n  });\n\n  socket.on(EVENTS.UPDATE_MESSAGE, data => {\n    // log('update message event', data);\n    const chat_details = store.getState().chat_details;\n    if (data && data.updateChatlogId && data.updateChatlogId.changedValue && data.updateChatlogId.psid && data.updateChatlogId.psid === chat_details.psid) {\n      store.dispatch({\n        type: actionTypes.UPDATE_MESSAGE,\n        payload: data.updateChatlogId,\n        key: 'cmid'\n      });\n    } else if (data && data.updatedCustomerMessage && data.updatedCustomerMessage.changedValue && data.updatedCustomerMessage.clientPsid === chat_details.psid) {\n      // log('dispatch update customer message');\n      store.dispatch({\n        type: actionTypes.UPDATE_MESSAGE,\n        payload: data.updatedCustomerMessage,\n        key: 'chatlogId'\n      });\n    } else if (data && data.messageSeen && data.messageSeen.clientPsid === chat_details.psid && data.messageSeen.senderPsid !== chat_details.psid) {\n      store.dispatch({\n        type: actionTypes.MESSAGE_SEEN,\n      });\n    }\n  });\n\n  socket.on(EVENTS.END_CONVERSATION, data => {\n    log('end conversation listener', data);\n    const chat_details = store.getState().chat_details;\n    if (data.psid === chat_details.psid) {\n      store.dispatch({\n        type: actionTypes.UPDATE_END_CHAT,\n        payload: {\n          visible: true,\n          show_resolved_card: true,\n        }\n      });\n    }\n  });\n};\n\nconst middleware = () => {\n  let socket = null;\n  return store => next => action => {\n    switch (action.type) {\n      case actionTypes.MAKE_SOCKET_CONNECTION: {\n        if (socket !== null) {\n          socket.close();\n        }\n        const socket_url = getSocketUrl();\n        socket = io(socket_url);\n        registerSocketListener(store, socket);\n        break;\n      }\n\n      case actionTypes.EMIT_CUSTOM_EVENT: {\n        if (socket && action.event) {\n          log('emit custom event', action.payload);\n          if (action.callback)\n            socket.emit(action.event, action.payload, action.callback);\n          else\n            socket.emit(action.event, action.payload);\n        }\n        break;\n      }\n\n      case actionTypes.EMIT_NEW_MESSAGE: {\n        if (socket) {\n          action.payload.session_id = socket.io.engine.id;\n          action.payload.current_session_id = socket.io.engine.id;\n          socket.emit(EVENTS.NEW_MESSAGE, action.payload, (err, res) => {\n            if (err) {\n              log('emit new message event error', err);\n              const payload = {\n                cmid: action.payload.cmid,\n                changedValue: {\n                  readStatus: MESSAGE_READ_STATUS.FAILED\n                }\n              };\n              store.dispatch({\n                type: actionTypes.UPDATE_MESSAGE,\n                payload,\n                key: 'cmid'\n              });\n            } else if (!err && res && res.data && res.data.cmid && res.data.changedValue) {\n              store.dispatch({\n                type: actionTypes.UPDATE_MESSAGE,\n                payload: res.data,\n                key: 'cmid',\n              });\n            }\n          });\n        }\n        break;\n      }\n\n      case actionTypes.BOT_POPUP_REQUEST: {\n        if (socket) {\n          socket.emit(EVENTS.BOT_AUTO_POPUP_REQUEST, action.payload, (err, res) => {\n            if (!err && res && res.data && res.data.displayMessage) {\n              log('bot auto popup request response', res);\n              const message = res.data.displayMessage;\n              store.dispatch({\n                type: actionTypes.PUSH_SENDER_MESSAGE,\n                payload: { message },\n              });\n            } else {\n              log('bot auto popup request error', err);\n            }\n          });\n        }\n        break;\n      }\n\n      case actionTypes.MESSAGE_VOTING: {\n        if (socket) {\n          socket.emit(EVENTS.CHATLOG_FEEDBACK, action.payload, res => {\n            log('chatlog feedback res', res);\n            if (!res.error && res.data && res.data.chatlogId && res.data.voteType) {\n              const payload = {\n                chatlogId: res.data.chatlogId,\n                changedValue: { voteType: res.data.voteType },\n              };\n              store.dispatch({\n                type: actionTypes.UPDATE_MESSAGE,\n                key: 'chatlogId',\n                payload\n              });\n            } else {\n              log('chatlog feedback event request error');\n            }\n          });\n        }\n        break;\n      }\n\n      case actionTypes.RESET_CHAT: {\n        if (socket) {\n          socket.emit(EVENTS.RESET_CHAT, action.payload, res => {\n            log('chatlog feedback res', res);\n            if (res.ok) {\n              action.callback();\n            } else if (res.error) {\n              log('reset chat event error');\n            }\n          });\n        }\n        break;\n      }\n\n      case actionTypes.SEND_FEEDBACK: {\n        if (socket) {\n          socket.emit(EVENTS.RECORD_FEEDBACK, action.payload, (err, data) => {\n            if (action.callback) {\n              action.callback(err);\n            }\n          });\n        }\n        break;\n      }\n\n      case actionTypes.SOCKET_DISCONNECT:\n        if (socket !== null) {\n          log('socket disconnected', socket);\n          socket.close();\n        }\n        socket = null;\n        break;\n\n      default:\n        return next(action);\n    }\n  };\n};\n\nexport default middleware();\n","import * as CONSTANTS from '../../config/constants';\nimport { isAndroid, getPsid, getLocalMessage, getLocalUnseenMessage, getLocalChatOpenStatus, getLocalNotificationCount, getDefaultMessages, getDataFromLocalStorage, LOCAL_STORAGE } from '../../config/utils'\n\nconst psid = getPsid();\nconst messages = getLocalMessage();\nconst unseen_messages = getLocalUnseenMessage();\nconst is_chat_open = getLocalChatOpenStatus();\nconst notification_count = getLocalNotificationCount();\nconst default_end_chat = {\n  visible: false,\n  show_confirmation_card: false,\n  show_resolved_card: false,\n  show_form_card: false,\n  form: [],\n  description: null,\n};\n\nconst states = {\n  chat_details: {\n    is_socket_connected: false,\n    is_internet_connected: false,\n    messages: isAndroid() ? getDefaultMessages() : messages,\n    psid,\n    unseen_messages,\n    notification_count,\n    is_chat_open,\n    downtime: {},\n    is_typing: false,\n    typing_text: \"\",\n    quick_replies: messages && messages.length > 0 && messages[messages.length - 1].sender === CONSTANTS.MESSAGE_SENDER.SERVER && messages[messages.length - 1].quickReplies ? messages[messages.length - 1].quickReplies : [],\n    is_input_lock: messages && messages.length > 0 && messages[messages.length - 1].sender === CONSTANTS.MESSAGE_SENDER.SERVER && messages[messages.length - 1].inputLock ? messages[messages.length - 1].inputLock : false,\n    input_lock_text: messages && messages.length > 0 && messages[messages.length - 1].sender === CONSTANTS.MESSAGE_SENDER.SERVER && messages[messages.length - 1].inputLockMessage ? messages[messages.length - 1].inputLockMessage : \"please select any option to proceed\",\n    skipLS: messages && messages.length > 0 && messages[messages.length - 1].sender === CONSTANTS.MESSAGE_SENDER.SERVER && messages[messages.length - 1].skipLS ? messages[messages.length - 1].skipLS : false,\n    send_variable_to_apiai: messages && messages.length > 0 && messages[messages.length - 1].sender === CONSTANTS.MESSAGE_SENDER.SERVER && messages[messages.length - 1].send_variable_to_apiai ? messages[messages.length - 1].send_variable_to_apiai : false,\n    sendVariableToLS: messages && messages.length > 0 && messages[messages.length - 1].sender === CONSTANTS.MESSAGE_SENDER.SERVER && messages[messages.length - 1].sendVariableToLS ? messages[messages.length - 1].sendVariableToLS : false,\n    variable_name: messages && messages.length > 0 && messages[messages.length - 1].sender === CONSTANTS.MESSAGE_SENDER.SERVER && messages[messages.length - 1].variable_name ? messages[messages.length - 1].variable_name : '',\n    end_chat: getDataFromLocalStorage(LOCAL_STORAGE.END_CHAT, default_end_chat),\n  },\n};\n\nexport default states;\n","import findLastIndex from 'lodash/findLastIndex';\n\nimport actionTypes from '../actiontypes';\nimport states from './states';\nimport { LOCAL_STORAGE, setDataInLocalStorage } from '../../config/utils';\nimport { MESSAGE_READ_STATUS, MESSAGE_SENDER } from '../../config/constants';\n\nconst chat_details = (state = states.chat_details, action) => {\n  switch (action.type) {\n    case actionTypes.UPDATE_STATE: {\n      return {\n        ...state,\n        [action.key]: action.payload\n      };\n    }\n\n    case actionTypes.UPDATE_END_CHAT: {\n      const end_chat = {\n        ...state.end_chat,\n        ...action.payload\n      };\n      setDataInLocalStorage(LOCAL_STORAGE.END_CHAT, end_chat)\n      return {\n        ...state,\n        end_chat\n      };\n    }\n\n    case actionTypes.HANDLE_CHATBOT_INTERFACE: {\n      localStorage.setItem(LOCAL_STORAGE.IS_CHAT_OPEN, JSON.stringify(action.payload));\n      localStorage.removeItem(LOCAL_STORAGE.UNSEEN_MESSAGES);\n      localStorage.removeItem(LOCAL_STORAGE.NOTIFICATION_COUNT);\n      return {\n        ...state,\n        is_chat_open: action.payload,\n        notification_count: action.payload ? 0 : state.notification_count,\n        unseen_messages: []\n      };\n    }\n\n    case actionTypes.PUSH_SENDER_MESSAGE: {\n      localStorage.setItem(LOCAL_STORAGE.MESSAGES(), JSON.stringify([...state.messages, action.payload.message]));\n      let unseen_messages = [...state.unseen_messages];\n      let notification_count = state.notification_count;\n      if (!state.is_chat_open) {\n        unseen_messages = [...state.unseen_messages, action.payload.message];\n        notification_count = 0;\n        localStorage.setItem(LOCAL_STORAGE.UNSEEN_MESSAGES, JSON.stringify(unseen_messages));\n        localStorage.setItem(LOCAL_STORAGE.NOTIFICATION_COUNT, JSON.stringify(notification_count));\n      }\n\n      return {\n        ...state,\n        unseen_messages,\n        notification_count,\n        messages: [...state.messages, action.payload.message],\n        skipLS: false,\n        send_variable_to_apiai: false,\n        sendVariableToLS: false,\n        variable_name: '',\n        quick_replies: [],\n        is_input_lock: false,\n      };\n    }\n\n    case actionTypes.PUSH_RESPONSE_MESSAGE: {\n      localStorage.setItem(LOCAL_STORAGE.MESSAGES(), JSON.stringify([...state.messages, action.payload.message]));\n      let notification_count = state.notification_count;\n      let unseen_messages = [...state.unseen_messages];\n      if (!state.is_chat_open) {\n        notification_count++;\n        unseen_messages = [...state.unseen_messages, action.payload.message];\n        localStorage.setItem(LOCAL_STORAGE.UNSEEN_MESSAGES, JSON.stringify(unseen_messages));\n        localStorage.setItem(LOCAL_STORAGE.NOTIFICATION_COUNT, JSON.stringify(notification_count));\n      }\n\n      return {\n        ...state,\n        notification_count,\n        unseen_messages,\n        messages: [...state.messages, action.payload.message],\n        quick_replies: action.payload.message.quickReplies ? action.payload.message.quickReplies : [],\n        is_input_lock: action.payload.message.inputLock ? action.payload.message.inputLock : false,\n        input_lock_text: action.payload.message.inputLockMessage ? action.payload.message.inputLockMessage : \"please select any option to proceed\",\n        skipLS: action.payload.message.skipLS,\n        sendVariableToLS: action.payload.message.sendVariableToLS,\n        send_variable_to_apiai: action.payload.message.send_variable_to_apiai,\n        variable_name: action.payload.message.variable_name,\n      };\n    }\n\n    case actionTypes.SET_DEFAULT_STATE: {\n      let msg_length = action.payload.messages.length;\n      let messages = action.payload.messages;\n\n      return {\n        ...state,\n        messages: messages,\n        skipLS: messages && msg_length > 0 && messages[msg_length - 1].skipLS ? messages[msg_length - 1].skipLS : false,\n        send_variable_to_apiai: messages && msg_length > 0 && messages[msg_length - 1].send_variable_to_apiai ? messages[msg_length - 1].send_variable_to_apiai : false,\n        sendVariableToLS: messages && msg_length > 0 && messages[msg_length - 1].sendVariableToLS ? messages[msg_length - 1].sendVariableToLS : false,\n        variable_name: messages && msg_length > 0 && messages[msg_length - 1].variable_name ? messages[msg_length - 1].variable_name : '',\n        quick_replies: messages && msg_length > 0 && messages[msg_length - 1].quickReplies ? messages[msg_length - 1].quickReplies : [],\n        is_input_lock: messages && msg_length > 0 && messages[msg_length - 1].inputLock ? messages[msg_length - 1].inputLock : false,\n        input_lock_text: messages && msg_length > 0 && messages[msg_length - 1].inputLockMessage ? messages[msg_length - 1].inputLockMessage : \"please select any option to proceed\",\n        is_typing: false,\n        typing_text: \"\",\n      };\n    }\n\n    case actionTypes.UPDATE_TYPING_INFO: {\n      return {\n        ...state,\n        is_typing: action.payload.isTyping,\n        typing_text: action.payload.typingMessage ? action.payload.typingMessage : \"\"\n      };\n    }\n\n    case actionTypes.UPDATE_FILE_UPLOAD_MESSAGE: {\n      let messages = [...state.messages];\n      let index = -1;\n      index = findLastIndex(messages, message => message.chatlogId === action.payload.message.chatlogId);\n      if (index !== -1) {\n        messages = [\n          ...messages.slice(0, index),\n          {\n            ...messages[index],\n            payload: {\n              ...messages[index].payload,\n              ...action.payload.data,\n            }\n          },\n          ...messages.slice(index + 1)\n        ];\n        localStorage.setItem(LOCAL_STORAGE.MESSAGES(), JSON.stringify(messages));\n      }\n      return {\n        ...state,\n        messages,\n      };\n    }\n\n    case actionTypes.UPDATE_MESSAGE: {\n      let messages = [...state.messages];\n      let index = -1;\n      index = findLastIndex(messages, message => message[action.key] === action.payload[action.key]);\n      if (index !== -1) {\n        messages = [\n          ...messages.slice(0, index),\n          {\n            ...messages[index],\n            ...action.payload.changedValue,\n          },\n          ...messages.slice(index + 1)\n        ];\n        localStorage.setItem(LOCAL_STORAGE.MESSAGES(), JSON.stringify(messages));\n      }\n      return {\n        ...state,\n        messages,\n      };\n    }\n\n    case actionTypes.MESSAGE_SEEN: {\n      let messages = [...state.messages];\n      for (let i = 0; i < messages.length; i++) {\n        if (messages[i].readStatus === MESSAGE_READ_STATUS.DELIVERED && messages[i].sender === MESSAGE_SENDER.CUSTOMER) {\n          messages[i] = {\n            ...messages[i],\n            readStatus: MESSAGE_READ_STATUS.SEEN,\n          };\n        }\n      }\n      return {\n        ...state,\n        messages,\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport default chat_details;\n","const states = {\n    page_details: {\n        device_data: {},\n        is_adster_bot: false,\n    }\n};\n\nexport default states;","import { combineReducers } from 'redux';\n\nimport chat_details from './chat_details/reducers';\nimport page_details from './page_details/reducers';\n\nconst rootReducer = combineReducers({\n    chat_details,\n    page_details\n});\n\nexport default rootReducer;","import actionTypes from '../actiontypes';\nimport states from './states';\n\nexport default function page_details(state = states.page_details, action) {\n    switch (action.type) {\n        case actionTypes.DEVICE_DATA_LOADED:\n            return {\n                ...state,\n                device_data: action.payload.device_data\n            };\n\n        case actionTypes.ENABLE_ADSTER_BOT:\n            return {\n                ...state,\n                is_adster_bot: action.payload\n            }; \n\n        default:\n            return state;\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import actionTypes from '../actiontypes';\n\nexport const setDeviceData = device_data => {\n  return {\n    type: actionTypes.DEVICE_DATA_LOADED,\n    payload: {\n      device_data: device_data\n    }\n  };\n}\n\nexport const enableAdsterBot = () => {\n  return {\n    type: actionTypes.ENABLE_ADSTER_BOT,\n    payload: true\n  };\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CloseIcon from 'react-icons/lib/md/close';\nimport ConversationIcon from 'react-icons/lib/fa/comments';\nimport Lottie from 'react-lottie';\n\nimport './index.scss';\n\nimport { chatbot_client_info } from '../../data/config/urls';\n\nclass TriggerChatBot extends React.PureComponent {\n    lottieDefaultOptions = {\n        loop: true,\n        autoplay: true,\n        path: chatbot_client_info.trigger.lottie_path,\n        rendererSettings: {\n            preserveAspectRatio: 'xMidYMid slice'\n        }\n    };\n\n    handleChatInterfaceView = () => {\n        const { is_chat_open, handleSocketConnection } = this.props;\n        handleSocketConnection(!is_chat_open)\n    };\n\n    render() {\n        const { is_chat_open } = this.props;\n\n        return (\n            <div className=\"ori-fixed ori-animated ori-zoom-in oriTriggerChatBotContainer\" onClick={this.handleChatInterfaceView}>\n                {\n                    !is_chat_open && chatbot_client_info.trigger.lottie_visibility &&\n                    <Lottie options={this.lottieDefaultOptions} height={chatbot_client_info.trigger.lottie_icon_height} width={chatbot_client_info.trigger.lottie_icon_width} />\n                }\n                {\n                    chatbot_client_info.trigger.visibility && !is_chat_open &&\n                    <div className=\"ori-animated ori-pulse ori-infinite\" style={{ height: `${chatbot_client_info.trigger.icon_height}px`, animationDuration: `${chatbot_client_info.trigger.animation_duration}ms` }}>\n                        <img src={chatbot_client_info.trigger.icon_url} alt=\"\" className=\"ori-full-parent-height\" />\n                    </div>\n                }\n                {\n                    !chatbot_client_info.trigger.visibility && !chatbot_client_info.trigger.lottie_visibility && !is_chat_open &&\n                    <div className=\"ori-flex-row ori-flex-center triggerIconContainer\">\n                        <ConversationIcon size={30} />\n                    </div>\n                }\n                {\n                    is_chat_open && chatbot_client_info.trigger.show_close_icon &&\n                    <div className=\"ori-flex-row ori-flex-center triggerIconContainer\">\n                        <CloseIcon size={28} />\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nTriggerChatBot.propTypes = {\n    is_chat_open: PropTypes.bool.isRequired,\n    handleSocketConnection: PropTypes.func,\n};\n\nexport default TriggerChatBot;\n","import React, { Component, Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport Badge from 'antd/lib/badge';\nimport merge from 'lodash/merge';\nimport SendingIcon from 'react-icons/lib/md/rotate-right';\n\nimport './index.scss';\n\nimport * as chatActions from '../data/redux/chat_details/actions';\nimport * as pageActions from '../data/redux/page_details/actions';\n\nimport { MESSAGE_TYPES, BUTTON_TYPES, BUTTON_SUB_TYPES, MESSAGE_SENDER, MESSAGE_READ_STATUS, EVENTS } from '../data/config/constants';\nimport { chatbot_client_info, chatbot_setting } from '../data/config/urls';\nimport { LOCAL_STORAGE, checkDevice, isAndroid, PLATFORM, getDefaultMessages, uniqueId } from '../data/config/utils';\n\nimport TriggerChatBot from '../components/triggerchatbot';\n\nconst ChatBot = React.lazy(() => import('./chatbot'));\nconst NotificationBot = React.lazy(() => import('./notificationbot'));\n\nclass AppContainer extends Component {\n  constructor(props) {\n    super(props);\n    window.androidObj = function AndroidClass() { };\n    props.actions.setDeviceData(checkDevice.deviceStatus());\n    this.timeout = false;\n    this.state = {\n      selected_checkbox_values: [],\n      selected_offer: {\n        offer_id: null,\n        offer_name: null\n      }\n    }\n  }\n\n  componentDidMount() {\n    const { chat_details, actions } = this.props;\n    const android = isAndroid();\n    let self = this;\n    window.bot_popup = this.botPopup;\n    window.addEventListener(\"resize\", () => {\n      clearTimeout(this.timeout);\n      this.timeout = setTimeout(() => {\n        self.props.actions.setDeviceData(checkDevice.deviceStatus());\n      }, 300);\n    });\n    this.handleConnectionChange();\n    window.addEventListener('online', this.handleConnectionChange);\n    window.addEventListener('offline', this.handleConnectionChange);\n    document.addEventListener(\"visibilitychange\", () => {\n      if (document.visibilityState === 'visible' && self.props.chat_details.is_chat_open) {\n        const payload = {\n          clientPsid: self.props.chat_details.psid,\n          senderPsid: self.props.chat_details.psid,\n        };\n        self.props.actions.emitCustomEvent(EVENTS.MESSAGE_SEEN, payload);\n      }\n    });\n\n    if (android) {\n      window.androidObj.updateFromAndroid = (type, data) => {\n        if (type.toLowerCase() === PLATFORM.ANDROID) {\n          localStorage.setItem(LOCAL_STORAGE.ANDROID, JSON.stringify(true));\n        } else if (type.toLowerCase() === 'psid') {\n          data = JSON.parse(data);\n          if (data.psid) {\n            localStorage.setItem(LOCAL_STORAGE.PSID, data.psid);\n            actions.updateState('psid', data.psid);\n          }\n          if (data.params) {\n            localStorage.setItem(LOCAL_STORAGE.APP_PARAMS, JSON.stringify(data.params));\n          }\n          if (!chat_details.is_socket_connected) {\n            actions.makeSocketConnection();\n            actions.setDefaultState();\n          }\n        }\n      }\n      actions.handleChatbotInterface(true);\n    } else if (!chat_details.is_socket_connected) {\n      let last_emit = localStorage.getItem(LOCAL_STORAGE.LAST_EMIT) ? JSON.parse(localStorage.getItem(LOCAL_STORAGE.LAST_EMIT)) : null;\n\n      if (last_emit) {\n        let current_time = new Date().getTime();\n        let time_gap = (current_time - last_emit) / 1000;\n        if (time_gap < chatbot_setting.automate_connection_time) {\n          actions.makeSocketConnection();\n        } else {\n          actions.handleChatbotInterface(false);\n        }\n        if (time_gap > chatbot_setting.automate_reset_chat_time) {\n          const default_messages = getDefaultMessages();\n          localStorage.setItem(LOCAL_STORAGE.MESSAGES, JSON.stringify(default_messages));\n          actions.setDefaultState();\n        }\n      } else {\n        actions.handleChatbotInterface(false);\n      }\n      if (chatbot_setting.adster_bot.visibility) {\n        const query_params = new URLSearchParams(window.location.search);\n        if (query_params.get(chatbot_setting.adster_bot.query_param_key)) {\n          this.handleSocketConnection(true);\n          actions.enableAdsterBot();\n        }\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    const { actions } = this.props;\n    window.removeEventListener('online', this.handleConnectionChange);\n    window.removeEventListener('offline', this.handleConnectionChange);\n    actions.socketDisconnect();\n  }\n\n  handleConnectionChange = () => {\n    const { actions } = this.props;\n    const condition = navigator.onLine ? 'online' : 'offline';\n    if (condition === 'online') {\n      const webPing = setInterval(\n        () => {\n          fetch('https//:google.com', {\n            mode: 'no-cors',\n          }).then(() => {\n            actions.updateState('is_internet_connected', true);\n            clearInterval(webPing)\n          }).catch(() => actions.updateState('is_internet_connected', false))\n        }, 1500);\n      return;\n    }\n    return actions.updateState('is_internet_connected', false);\n  }\n\n  botPopup = (case_data, params) => {\n    const { chat_details, actions } = this.props;\n    let payload = {\n      case: case_data,\n      params: params,\n      psid: chat_details.psid\n    };\n    actions.handleBotPopupRequest(payload);\n  };\n\n  handleSocketConnection = bool => {\n    const { chat_details, actions } = this.props;\n    const android = isAndroid();\n    actions.handleChatbotInterface(bool);\n    if (bool && chat_details.is_socket_connected) {\n      const payload = {\n        clientPsid: chat_details.psid,\n        senderPsid: chat_details.psid,\n      };\n      actions.emitCustomEvent(EVENTS.MESSAGE_SEEN, payload);\n    }\n    if (bool && !chat_details.is_socket_connected && !android) {\n      actions.makeSocketConnection();\n    }\n  };\n\n  handleOfferSelection = (offer_id, offer_name) => {\n    this.setState({\n      selected_offer: {\n        ...this.state.selected_offer,\n        offer_id,\n        offer_name\n      }\n    });\n  };\n\n  setDefaultOfferState = () => {\n    this.setState({\n      selected_offer: {\n        ...this.state.selected_offer,\n        offer_id: null,\n        offer_name: null,\n      }\n    });\n  };\n\n  onChangeCheckbox = (selected_checkbox_values) => {\n    this.setState({ selected_checkbox_values });\n  };\n\n  emitResponseToServer = response => {\n    const { chat_details, actions } = this.props;\n    const android = isAndroid();\n    const data = {\n      ...response,\n      sender_id: chatbot_client_info.sender_id,\n      navigator_userAgent: navigator.userAgent,\n      navigator_platform: navigator.platform,\n      variable_name: chat_details.variable_name,\n      send_variable_to_apiai: chat_details.send_variable_to_apiai,\n      sendVariableToLS: chat_details.sendVariableToLS,\n      skipLS: chat_details.skipLS\n    };\n    if (android && localStorage.getItem(LOCAL_STORAGE.APP_PARAMS)) {\n      data.lockedParams = JSON.parse(localStorage.getItem(LOCAL_STORAGE.APP_PARAMS));\n      localStorage.removeItem(LOCAL_STORAGE.APP_PARAMS);\n    }\n    actions.emitNewMessageToServer(data);\n    let emit_time = new Date().getTime();\n    localStorage.setItem(LOCAL_STORAGE.LAST_EMIT, JSON.stringify(emit_time));\n\n  };\n\n  pushSenderNewMsgToChatbot = (type, data) => {\n    const { actions } = this.props;\n    const user_message = {\n      type,\n      sender_id: chatbot_client_info.sender_id,\n      timestamp: new Date(),\n      sender: MESSAGE_SENDER.CUSTOMER,\n      readStatus: MESSAGE_READ_STATUS.SENDING,\n      ...data,\n    };\n    actions.pushSenderMessage(user_message);\n  };\n\n  sendTextToServer = text => {\n    const cmid = uniqueId();\n    const response = {\n      type: MESSAGE_TYPES.TEXT,\n      text,\n      cmid\n    };\n    const data = {\n      payload: { text },\n      cmid\n    };\n    this.emitResponseToServer(response);\n    this.pushSenderNewMsgToChatbot(MESSAGE_TYPES.TEXT, data);\n  };\n\n  handleButtonSubTypes = data => {\n    switch (data.button.subtype) {\n      case BUTTON_SUB_TYPES.DISH_OFFERS:\n        const { selected_offer } = this.state;\n        const cmid = uniqueId();\n        const response = {\n          type: MESSAGE_TYPES.TEXT,\n          text: selected_offer.offer_id,\n          cmid\n        };\n        const data = {\n          payload: { text: selected_offer.offer_name },\n          cmid,\n        };\n        this.pushSenderNewMsgToChatbot(MESSAGE_TYPES.TEXT, data);\n        this.emitResponseToServer(response);\n        if (selected_offer.offer_id) {\n          this.setDefaultOfferState();\n        }\n        break;\n\n      case BUTTON_SUB_TYPES.CHECKBOX_SUBMIT:\n        if (data.message && data.message.payload && data.message.payload.options) {\n          const { selected_checkbox_values } = this.state;\n          const selected_checkbox_items = data.message.payload.options.filter((item) => {\n            return selected_checkbox_values.findIndex(value => value === item.value) !== -1;\n          });\n          if (selected_checkbox_items.length > 0) {\n            const cmid = uniqueId();\n            const response = {\n              type: MESSAGE_TYPES.LIST,\n              list: selected_checkbox_items,\n              relayData: data.button.relayData,\n              cmid\n            };\n            const obj = {\n              payload: { list: selected_checkbox_items },\n              cmid,\n            };\n            this.pushSenderNewMsgToChatbot(MESSAGE_TYPES.LIST, obj);\n            this.emitResponseToServer(response);\n          }\n        }\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  handleMsgBtnClick = data => {\n    if (data.button) {\n      switch (data.button.type) {\n        case BUTTON_TYPES.LINK:\n          if (data.button.url && data.button.url.trim().length > 0) {\n            const android = localStorage.getItem(LOCAL_STORAGE.ANDROID) ? JSON.parse(localStorage.getItem(LOCAL_STORAGE.ANDROID)) : false;\n            if (android) {\n              window.androidObj.textToAndroid(JSON.stringify(data));\n            } else {\n              window.open(data.button.url, '_blank');\n            }\n          }\n          break;\n\n        case BUTTON_TYPES.CUSTOM:\n          if (data.button.subtype) {\n            this.handleButtonSubTypes(data);\n          }\n          break;\n\n        case BUTTON_TYPES.CUSTOM_SOCKET_EVENT: {\n          const cmid = uniqueId();\n          if (data.button.text) {\n            const obj = {\n              payload: { text: data.button.text },\n              cmid\n            };\n            this.pushSenderNewMsgToChatbot(MESSAGE_TYPES.TEXT, obj);\n          }\n\n          if (data.button.eventName) {\n            let payload = {\n              relayData: merge({}, data.message.relayData, data.button.relayData),\n              text: data.message.payload.title,\n              type: data.message.payload && data.message.payload.expectedClientResponseType ? data.message.payload.expectedClientResponseType : MESSAGE_TYPES.TEXT,\n              cmid\n            };\n            this.props.actions.emitCustomEvent(data.button.eventName, payload);\n          }\n        }\n          break;\n\n        case BUTTON_TYPES.POST_BACK_RESPONSE: {\n          const cmid = uniqueId();\n          if (data.button.text) {\n            const obj = {\n              payload: { text: data.button.text },\n              cmid\n            };\n            this.pushSenderNewMsgToChatbot(MESSAGE_TYPES.TEXT, obj);\n          }\n          if (data.button.postbackRes) {\n            const response = {\n              type: MESSAGE_TYPES.TEXT,\n              text: data.button.postbackRes,\n              cmid\n            };\n            this.emitResponseToServer(response);\n          }\n        }\n          break;\n\n        default:\n          if (data.button.text) {\n            this.sendTextToServer(data.button.text);\n          }\n      }\n    }\n  };\n\n  handleFileUpload = (data, message) => {\n    if (data && data.fileUrl && data.file) {\n      console.log('upload data', data);\n      if (message) {\n        const payload = {\n          data,\n          message,\n        };\n        this.props.actions.updateFileUploadMessage(payload);\n      }\n      const cmid = uniqueId();\n      const response = {\n        type: MESSAGE_TYPES.FILE,\n        relayData: message && message.payload ? message.payload.relayData : null,\n        fileBase64: data.fileUrl,\n        cmid\n      };\n      this.emitResponseToServer(response);\n      const obj = {\n        payload: { title: data.file.name, imageUrl: data.fileUrl },\n        cmid\n      };\n      this.pushSenderNewMsgToChatbot(MESSAGE_TYPES.IMAGE_WITH_BUTTONS, obj);\n    }\n  };\n\n  render() {\n    const { page_details, chat_details, actions } = this.props;\n    return (\n      <div className=\"ori-app-container ori-ant-design-container oriAppContainer\">\n        <Badge count={chat_details.notification_count} overflowCount={9} className=\"ori-animated ori-fade-in notificationBadge\">\n          <TriggerChatBot is_chat_open={chat_details.is_chat_open} handleSocketConnection={this.handleSocketConnection} />\n        </Badge>\n        <Suspense fallback={\n          <div>\n            <SendingIcon className=\"ori-l-mrgn-5 ori-animated ori-rotate ori-infinite\" />\n          </div>\n        }\n        >\n          {\n            chat_details.is_chat_open &&\n            <ChatBot is_adster_bot={page_details.is_adster_bot} chat_details={chat_details} actions={actions} sendTextToServer={this.sendTextToServer} handleMsgBtnClick={this.handleMsgBtnClick} handleFileUpload={this.handleFileUpload} handleOfferSelection={this.handleOfferSelection} onChangeCheckbox={this.onChangeCheckbox} />\n          }\n          {\n            chatbot_setting.notification_bot.visibility && !chat_details.is_chat_open && chat_details.unseen_messages.length > 0 &&\n            <NotificationBot page_details={page_details} chat_details={chat_details} actions={actions} sendTextToServer={this.sendTextToServer} handleMsgBtnClick={this.handleMsgBtnClick} handleFileUpload={this.handleFileUpload} handleOfferSelection={this.handleOfferSelection} stack_view={chatbot_setting.notification_bot.stack_view} onChangeCheckbox={this.onChangeCheckbox} />\n          }\n        </Suspense>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    chat_details: state.chat_details,\n    page_details: state.page_details\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    actions: bindActionCreators(Object.assign({}, pageActions, chatActions), dispatch)\n  };\n};\n\nAppContainer.propTypes = {\n  actions: PropTypes.object,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node])\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppContainer);\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { init } from '@sentry/browser';\n\nimport createStore from './data/redux/store';\nimport * as serviceWorker from './serviceWorker';\n\nimport { chatbot_client_info } from './data/config/urls';\n\nimport './data/styles/index.scss';\n\nimport AppContainer from './modules';\n\ninit({ dsn: chatbot_client_info.sentry_dsn });\n\nconst store = createStore();\n\nvar x = document.createElement(\"DIV\");\nx.setAttribute(\"id\", \"ori-chatbot-root\");\ndocument.body.appendChild(x);\n\nReactDOM.render(<Provider store={store}><AppContainer /></Provider>, document.getElementById('ori-chatbot-root'));\nserviceWorker.unregister();\n","import { createStore as _createStore, applyMiddleware, compose } from 'redux';\n\nimport socketMiddleware from './chat_details/middleware';\nimport rootReducer from './rootreducer';\n\nexport default function createStore() {\n  const middlewares = [\n    socketMiddleware\n  ];\n  return _createStore(\n    rootReducer,\n    compose(\n      applyMiddleware(...middlewares),\n      window.devToolsExtension ? window.devToolsExtension() : f => f\n    )\n  );\n}\n"],"sourceRoot":""}